import*as THREE from'https://threejs.org/build/three.module.js';var cube;var scene=new THREE.Scene();var camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,0.1,1000);camera.position.z=10;var renderer=new THREE.WebGLRenderer();renderer.setSize(window.innerWidth,window.innerHeight);document.body.appendChild(renderer.domElement);var geometry=new THREE.BoxGeometry(1,1,1);var material=new THREE.MeshBasicMaterial({color:0x00ff00});cube=new THREE.Mesh(geometry,material);scene.add(cube);var dx=(Math.random()-0.5)/10;var dy=(Math.random()-0.5)/10;var dz=(Math.random()-0.5)/10;var particles=new THREE.BufferGeometry();var positions=[];for(var i=0;i<1000;i++){positions.push((Math.random()-0.5)*10,(Math.random()-0.5)*10,(Math.random()-0.5)*10);}
particles.setAttribute('position',new THREE.Float32BufferAttribute(positions,3));var particleMaterial=new THREE.PointsMaterial({color:0xffffff,size:0.01});var particleSystem=new THREE.Points(particles,particleMaterial);cube.add(particleSystem);function animate(){requestAnimationFrame(animate);cube.rotation.x+=0.01;cube.rotation.y+=0.01;cube.position.x+=dx;cube.position.y+=dy;cube.position.z+=dz;if(Math.abs(cube.position.x)>5)dx=-dx;if(Math.abs(cube.position.y)>5)dy=-dy;if(Math.abs(cube.position.z)>5)dz=-dz;var positions=particleSystem.geometry.attributes.position.array;for(var i=0;i<positions.length;i+=3){positions[i]+=(Math.random()-0.5)/10;positions[i+1]+=(Math.random()-0.5)/10;positions[i+2]+=(Math.random()-0.5)/10;}
particleSystem.geometry.attributes.position.needsUpdate=true;renderer.render(scene,camera);}
animate();function divideCube(){console.log("divideCube function called");if(!cube){console.error("Cube is not properly initialized");return;}
if(!cube.geometry){console.error("Cube does not have geometry");return;}
var sizeX=cube.geometry.parameters.width;var sizeY=cube.geometry.parameters.height;var sizeZ=cube.geometry.parameters.depth;var positionX=cube.position.x;var positionY=cube.position.y;var positionZ=cube.position.z;var geometry=new THREE.BoxGeometry(sizeX,sizeY,sizeZ);var material=new THREE.MeshBasicMaterial({color:0x00ff00});var newCube=new THREE.Mesh(geometry,material);newCube.position.set(positionX,positionY,positionZ);scene.add(newCube);}
var source=new EventSource("/stream");source.onmessage=function(event){console.log("Received event with data:",event.data);if(event.data==="divide"){divideCube();event.data===null;}};var cubeGroup=new THREE.Group();function createGrid(){while(cubeGroup.children.length>0){cubeGroup.remove(cubeGroup.children[0]);}
var geometry=new THREE.SphereGeometry(1,32,32);var material=new THREE.MeshBasicMaterial({color:0x8000ff});var sphere=new THREE.Mesh(geometry,material);cubeGroup.add(sphere);window.sphere=sphere;var cubeGeometry=new THREE.BoxGeometry(1,1,1);var cubeMaterial=new THREE.MeshBasicMaterial({color:0x00ff00});var cube=new THREE.Mesh(cubeGeometry,cubeMaterial);cubeGroup.add(cube);window.cube=cube;scene.add(cubeGroup);}
var collisionDetected=false;function checkCollision(cube,sphere){cube.geometry.computeBoundingSphere();sphere.geometry.computeBoundingSphere();var cubeRadius=cube.geometry.boundingSphere.radius;var sphereRadius=sphere.geometry.boundingSphere.radius;var distance=cube.position.distanceTo(sphere.position);if(distance<cubeRadius+sphereRadius){if(!collisionDetected){console.log("Collision detected!");collisionDetected=true;cube.material.color.set(0xff0000);sphere.material.color.set(0xff0000);}
var direction=new THREE.Vector3().subVectors(cube.position,sphere.position).normalize();cube.position.add(direction.multiplyScalar(0.1));}else{if(collisionDetected){collisionDetected=false;cube.material.color.set(0x00ff00);sphere.material.color.set(0x0000ff);}}}
var geometry=new THREE.SphereGeometry(1,32,32);var material=new THREE.MeshBasicMaterial({color:0xffff00});var sphere=new THREE.Mesh(geometry,material);scene.add(sphere);function animateSphere(){requestAnimationFrame(animateSphere);cube.position.x+=dx;cube.position.y+=dy;cube.position.z+=dz;if(Math.abs(cube.position.x)>5)dx=-dx;if(Math.abs(cube.position.y)>5)dy=-dy;if(Math.abs(cube.position.z)>5)dz=-dz;checkCollision(cube,sphere);renderer.render(scene,camera);}
animateSphere();var source=new EventSource("/stream");source.onmessage=function(event){console.log("Received event with data:",event.data);if(event.data==="createGrid"){createGrid();console.log("Cube object: ",window.cube);console.log("Sphere object: ",window.sphere);checkCollision(window.cube,window.sphere);}};